import numpy as np
import matplotlib.pyplot as plt

# Define the system matrices based on the provided suggestion
A = np.array([[0.7, 0], [0, 0.8]])
B = np.array([[1], [0.5]])
C = np.array([[1, 0]])
Q = np.array([[0.01, 0], [0, 0.01]])
R = np.array([[0.1]])
K = np.array([[0.1, 0.1]])

# Define the initial state and covariance
x0 = np.array([[0], [0]])
P0 = np.eye(2)

# Define simulation parameters
t_sim = 100
dt = 1  # time step

# Initialize simulation arrays
x_true = x0
x_est = x0
P = P0
Sigma = P0

# Storage for plotting
ys = []
xs_est = []
us = []
Ps = []

# Main simulation loop
for t in range(t_sim):
    # Simulate the true system dynamics
    w = np.random.multivariate_normal(np.zeros(2), Q)  # Process noise
    v = np.random.normal(0, R)  # Measurement noise
    x_true = A @ x_true + B @ K @ x_est + w[:, np.newaxis]
    y = C @ x_true + v

    # Kalman filter prediction
    x_pred = A @ x_est + B @ K @ x_est
    P_pred = A @ P @ A.T + Q

    # Kalman filter update
    S = C @ P_pred @ C.T + R
    K_gain = P_pred @ C.T @ np.linalg.inv(S)
    x_est = x_pred + K_gain @ (y - C @ x_pred)
    P = (np.eye(2) - K_gain @ C) @ P_pred

    # Save for plotting
    ys.append(y[0])
    xs_est.append(x_est.flatten())
    Ps.append(np.diag(P))
    us.append((K @ x_est)[0, 0])

# Convert lists to arrays for plotting
ys = np.array(ys)
xs_est = np.array(xs_est)
Ps = np.array(Ps)
us = np.array(us)

# Plot system output
plt.figure(figsize=(14, 6))
plt.subplot(3, 1, 1)
plt.plot(ys, label='Output y(t)')
plt.title('System Output')
plt.legend()

# Plot state estimates
plt.subplot(3, 1, 2)
plt.plot(xs_est[:, 0], label='State Estimate x1(t|t)')
plt.plot(xs_est[:, 1], label='State Estimate x2(t|t)')
plt.title('State Estimates')
plt.legend()

# Plot control actions
plt.subplot(3, 1, 3)
plt.plot(us, label='Control Action u(t)')
plt.title('Control Actions')
plt.legend()

plt.tight_layout()
plt.show()

# Plot covariance convergence
plt.figure(figsize=(7, 5))
plt.plot(Ps[:, 0], label='P[0,0]')
plt.plot(Ps[:, 1], label='P[1,1]')
plt.title('Covariance Convergence')
plt.legend()
plt.show()
